dist: xenial
sudo: required
language: julia
matrix:
  include:
    #- os: linux
    #  addons:
    #    apt:
    #      sources:
    #        - ubuntu-toolchain-r-test
    #      packages:
    #        - g++-5
    #  env: COMPILER=gcc GCC=5
    #  julia: 1.0.1
    #- os: linux
    #  addons:
    #    apt:
    #      sources:
    #        - ubuntu-toolchain-r-test
    #      packages:
    #        - g++-6
    #  env: COMPILER=gcc GCC=6
    #  julia: 1.1.1
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
      env: COMPILER=gcc GCC=7
      julia: 1.2.0
    #- os: linux
    #  addons:
    #    apt:
    #      sources:
    #        - ubuntu-toolchain-r-test
    #      packages:
    #        - g++-5
    #  env: COMPILER=gcc GCC=5
    #  julia: nightly
    #- os: osx
    #  osx_image: xcode8
    #  compiler: clang
    #  julia: 1.1.1
    - os: osx
      osx_image: xcode10
      compiler: clang
      julia: 1.1.1
  allow_failures:
    - julia: nightly
env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"
before_install:
    - |
      # Configure build variables
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$COMPILER" == "gcc" ]]; then
          export CXX=g++-$GCC CC=gcc-$GCC;
        fi
        if [[ "$COMPILER" == "clang" ]]; then
          export CXX=clang++-$CLANG CC=clang-$CLANG;
        fi
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export CXX=clang++ CC=clang;
      fi

install:
    # Define the version of miniconda to download
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        MINCONDA_OS=$MINCONDA_LINUX;
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        MINCONDA_OS=$MINCONDA_OSX;
      fi
    - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    - conda info -a
    # Install xtensor and other conda requirements
    - conda install cmake -c conda-forge
    - conda install xtensor==0.21.2 libcxxwrap-julia=0.6.6 -c conda-forge
    # Install CxxWrap
    - JLCXX_DIR=$HOME/miniconda julia -E "using Pkg; Pkg.add(PackageSpec(name=\"CxxWrap\", version=\"0.9.0\"))"
    # Build xtensor-julia tests
    - mkdir build
    - cd build
    - cmake -D DOWNLOAD_GTEST=ON -D CMAKE_INSTALL_PREFIX=$HOME/miniconda ..
    - make -j2 test_xtensor_julia

script:
    - make xtest

